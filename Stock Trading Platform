import java.util.*;

// Class representing a Stock
class Stock {
    String symbol;
    double price;

    Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }

    void updatePrice() {
        double change = (Math.random() - 0.5) * 10; // Simulate price change ¬±5
        price = Math.round((price + change) * 100.0) / 100.0;
    }
}

// Class representing the Stock Market
class Market {
    Map<String, Stock> stocks = new HashMap<>();

    Market() {
        stocks.put("AAPL", new Stock("AAPL", 150.0));
        stocks.put("GOOG", new Stock("GOOG", 2800.0));
        stocks.put("TSLA", new Stock("TSLA", 700.0));
    }

    void updatePrices() {
        for (Stock stock : stocks.values()) {
            stock.updatePrice();
        }
    }

    void showMarket() {
        System.out.println("----- Market Prices -----");
        for (Stock stock : stocks.values()) {
            System.out.printf("%s : ‚Çπ%.2f%n", stock.symbol, stock.price);
        }
    }

    Stock getStock(String symbol) {
        return stocks.get(symbol.toUpperCase());
    }
}

// Class representing the user's Portfolio
class Portfolio {
    Map<String, Integer> holdings = new HashMap<>();
    double cash = 10000.0;

    void buy(String symbol, int quantity, double price) {
        double cost = quantity * price;
        if (cash >= cost) {
            holdings.put(symbol, holdings.getOrDefault(symbol, 0) + quantity);
            cash -= cost;
            System.out.println("‚úÖ Bought " + quantity + " shares of " + symbol);
        } else {
            System.out.println("‚ùå Not enough cash.");
        }
    }

    void sell(String symbol, int quantity, double price) {
        int owned = holdings.getOrDefault(symbol, 0);
        if (owned >= quantity) {
            holdings.put(symbol, owned - quantity);
            cash += quantity * price;
            System.out.println("‚úÖ Sold " + quantity + " shares of " + symbol);
        } else {
            System.out.println("‚ùå Not enough shares to sell.");
        }
    }

    void viewPortfolio(Market market) {
        System.out.println("----- Your Portfolio -----");
        double total = cash;
        for (String symbol : holdings.keySet()) {
            int qty = holdings.get(symbol);
            Stock stock = market.getStock(symbol);
            double value = qty * stock.price;
            System.out.printf("%s: %d shares (‚Çπ%.2f each) = ‚Çπ%.2f%n", symbol, qty, stock.price, value);
            total += value;
        }
        System.out.printf("Cash: ‚Çπ%.2f%n", cash);
        System.out.printf("Total Portfolio Value: ‚Çπ%.2f%n", total);
    }
}

// Main Class
public class StockTradingPlatform {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Market market = new Market();
        Portfolio portfolio = new Portfolio();

        while (true) {
            market.updatePrices();
            System.out.println("\n==============================");
            market.showMarket();
            System.out.println("==============================");
            System.out.println("1. Buy Stock");
            System.out.println("2. Sell Stock");
            System.out.println("3. View Portfolio");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter stock symbol: ");
                    String buySymbol = sc.next();
                    Stock buyStock = market.getStock(buySymbol);
                    if (buyStock != null) {
                        System.out.print("Enter quantity to buy: ");
                        int qty = sc.nextInt();
                        portfolio.buy(buySymbol.toUpperCase(), qty, buyStock.price);
                    } else {
                        System.out.println("‚ùå Invalid stock symbol.");
                    }
                    break;

                case 2:
                    System.out.print("Enter stock symbol: ");
                    String sellSymbol = sc.next();
                    Stock sellStock = market.getStock(sellSymbol);
                    if (sellStock != null) {
                        System.out.print("Enter quantity to sell: ");
                        int qty = sc.nextInt();
                        portfolio.sell(sellSymbol.toUpperCase(), qty, sellStock.price);
                    } else {
                        System.out.println("‚ùå Invalid stock symbol.");
                    }
                    break;

                case 3:
                    portfolio.viewPortfolio(market);
                    break;

                case 4:
                    System.out.println("üìâ Exiting... Thanks for trading!");
                    sc.close();
                    return;

                default:
                    System.out.println("‚ùå Invalid option.");
            }
        }
    }
}

  
   

           
